// 
// Decompiled by Procyon v0.5.36
// 

package com.alibaba.druid.filter;

import com.alibaba.druid.proxy.jdbc.ResultSetProxy;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.CallableStatementProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import java.sql.SQLException;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import java.util.Properties;

public abstract class FilterEventAdapter extends FilterAdapter
{
    @Override
    public ConnectionProxy connection_connect(final FilterChain chain, final Properties info) throws SQLException {
        this.connection_connectBefore(chain, info);
        final ConnectionProxy connection = super.connection_connect(chain, info);
        this.connection_connectAfter(connection);
        return connection;
    }
    
    public void connection_connectBefore(final FilterChain chain, final Properties info) {
    }
    
    public void connection_connectAfter(final ConnectionProxy connection) {
    }
    
    @Override
    public StatementProxy connection_createStatement(final FilterChain chain, final ConnectionProxy connection) throws SQLException {
        final StatementProxy statement = super.connection_createStatement(chain, connection);
        this.statementCreateAfter(statement);
        return statement;
    }
    
    @Override
    public StatementProxy connection_createStatement(final FilterChain chain, final ConnectionProxy connection, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        final StatementProxy statement = super.connection_createStatement(chain, connection, resultSetType, resultSetConcurrency);
        this.statementCreateAfter(statement);
        return statement;
    }
    
    @Override
    public StatementProxy connection_createStatement(final FilterChain chain, final ConnectionProxy connection, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        final StatementProxy statement = super.connection_createStatement(chain, connection, resultSetType, resultSetConcurrency, resultSetHoldability);
        this.statementCreateAfter(statement);
        return statement;
    }
    
    @Override
    public CallableStatementProxy connection_prepareCall(final FilterChain chain, final ConnectionProxy connection, final String sql) throws SQLException {
        final CallableStatementProxy statement = super.connection_prepareCall(chain, connection, sql);
        this.statementPrepareCallAfter(statement);
        return statement;
    }
    
    @Override
    public CallableStatementProxy connection_prepareCall(final FilterChain chain, final ConnectionProxy connection, final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        final CallableStatementProxy statement = super.connection_prepareCall(chain, connection, sql, resultSetType, resultSetConcurrency);
        this.statementPrepareCallAfter(statement);
        return statement;
    }
    
    @Override
    public CallableStatementProxy connection_prepareCall(final FilterChain chain, final ConnectionProxy connection, final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        final CallableStatementProxy statement = super.connection_prepareCall(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        this.statementPrepareCallAfter(statement);
        return statement;
    }
    
    @Override
    public PreparedStatementProxy connection_prepareStatement(final FilterChain chain, final ConnectionProxy connection, final String sql) throws SQLException {
        final PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql);
        this.statementPrepareAfter(statement);
        return statement;
    }
    
    @Override
    public PreparedStatementProxy connection_prepareStatement(final FilterChain chain, final ConnectionProxy connection, final String sql, final int autoGeneratedKeys) throws SQLException {
        final PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
        this.statementPrepareAfter(statement);
        return statement;
    }
    
    @Override
    public PreparedStatementProxy connection_prepareStatement(final FilterChain chain, final ConnectionProxy connection, final String sql, final int resultSetType, final int resultSetConcurrency) throws SQLException {
        final PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency);
        this.statementPrepareAfter(statement);
        return statement;
    }
    
    @Override
    public PreparedStatementProxy connection_prepareStatement(final FilterChain chain, final ConnectionProxy connection, final String sql, final int resultSetType, final int resultSetConcurrency, final int resultSetHoldability) throws SQLException {
        final PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, resultSetType, resultSetConcurrency, resultSetHoldability);
        this.statementPrepareAfter(statement);
        return statement;
    }
    
    @Override
    public PreparedStatementProxy connection_prepareStatement(final FilterChain chain, final ConnectionProxy connection, final String sql, final int[] columnIndexes) throws SQLException {
        final PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, columnIndexes);
        this.statementPrepareAfter(statement);
        return statement;
    }
    
    @Override
    public PreparedStatementProxy connection_prepareStatement(final FilterChain chain, final ConnectionProxy connection, final String sql, final String[] columnNames) throws SQLException {
        final PreparedStatementProxy statement = super.connection_prepareStatement(chain, connection, sql, columnNames);
        this.statementPrepareAfter(statement);
        return statement;
    }
    
    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql) throws SQLException {
        this.statementExecuteBefore(statement, sql);
        try {
            final boolean firstResult = super.statement_execute(chain, statement, sql);
            this.statementExecuteAfter(statement, sql, firstResult);
            return firstResult;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql, final int autoGeneratedKeys) throws SQLException {
        this.statementExecuteBefore(statement, sql);
        try {
            final boolean firstResult = super.statement_execute(chain, statement, sql, autoGeneratedKeys);
            this.statementExecuteAfter(statement, sql, firstResult);
            return firstResult;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql, final int[] columnIndexes) throws SQLException {
        this.statementExecuteBefore(statement, sql);
        try {
            final boolean firstResult = super.statement_execute(chain, statement, sql, columnIndexes);
            this.statementExecuteAfter(statement, sql, firstResult);
            return firstResult;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public boolean statement_execute(final FilterChain chain, final StatementProxy statement, final String sql, final String[] columnNames) throws SQLException {
        this.statementExecuteBefore(statement, sql);
        try {
            final boolean firstResult = super.statement_execute(chain, statement, sql, columnNames);
            this.statementExecuteAfter(statement, sql, firstResult);
            return firstResult;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public int[] statement_executeBatch(final FilterChain chain, final StatementProxy statement) throws SQLException {
        this.statementExecuteBatchBefore(statement);
        try {
            final int[] result = super.statement_executeBatch(chain, statement);
            this.statementExecuteBatchAfter(statement, result);
            return result;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, statement.getBatchSql(), error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, statement.getBatchSql(), error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, statement.getBatchSql(), error3);
            throw error3;
        }
    }
    
    @Override
    public ResultSetProxy statement_executeQuery(final FilterChain chain, final StatementProxy statement, final String sql) throws SQLException {
        this.statementExecuteQueryBefore(statement, sql);
        try {
            final ResultSetProxy resultSet = super.statement_executeQuery(chain, statement, sql);
            if (resultSet != null) {
                this.statementExecuteQueryAfter(statement, sql, resultSet);
                this.resultSetOpenAfter(resultSet);
            }
            return resultSet;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql) throws SQLException {
        this.statementExecuteUpdateBefore(statement, sql);
        try {
            final int updateCount = super.statement_executeUpdate(chain, statement, sql);
            this.statementExecuteUpdateAfter(statement, sql, updateCount);
            return updateCount;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql, final int autoGeneratedKeys) throws SQLException {
        this.statementExecuteUpdateBefore(statement, sql);
        try {
            final int updateCount = super.statement_executeUpdate(chain, statement, sql, autoGeneratedKeys);
            this.statementExecuteUpdateAfter(statement, sql, updateCount);
            return updateCount;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql, final int[] columnIndexes) throws SQLException {
        this.statementExecuteUpdateBefore(statement, sql);
        try {
            final int updateCount = super.statement_executeUpdate(chain, statement, sql, columnIndexes);
            this.statementExecuteUpdateAfter(statement, sql, updateCount);
            return updateCount;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public int statement_executeUpdate(final FilterChain chain, final StatementProxy statement, final String sql, final String[] columnNames) throws SQLException {
        this.statementExecuteUpdateBefore(statement, sql);
        try {
            final int updateCount = super.statement_executeUpdate(chain, statement, sql, columnNames);
            this.statementExecuteUpdateAfter(statement, sql, updateCount);
            return updateCount;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, sql, error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, sql, error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, sql, error3);
            throw error3;
        }
    }
    
    @Override
    public ResultSetProxy statement_getGeneratedKeys(final FilterChain chain, final StatementProxy statement) throws SQLException {
        final ResultSetProxy resultSet = super.statement_getGeneratedKeys(chain, statement);
        if (resultSet != null) {
            this.resultSetOpenAfter(resultSet);
        }
        return resultSet;
    }
    
    @Override
    public ResultSetProxy statement_getResultSet(final FilterChain chain, final StatementProxy statement) throws SQLException {
        final ResultSetProxy resultSet = super.statement_getResultSet(chain, statement);
        if (resultSet != null) {
            this.resultSetOpenAfter(resultSet);
        }
        return resultSet;
    }
    
    @Override
    public boolean preparedStatement_execute(final FilterChain chain, final PreparedStatementProxy statement) throws SQLException {
        try {
            this.statementExecuteBefore(statement, statement.getSql());
            final boolean firstResult = chain.preparedStatement_execute(statement);
            this.statementExecuteAfter(statement, statement.getSql(), firstResult);
            return firstResult;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error3);
            throw error3;
        }
    }
    
    @Override
    public ResultSetProxy preparedStatement_executeQuery(final FilterChain chain, final PreparedStatementProxy statement) throws SQLException {
        try {
            this.statementExecuteQueryBefore(statement, statement.getSql());
            final ResultSetProxy resultSet = chain.preparedStatement_executeQuery(statement);
            if (resultSet != null) {
                this.statementExecuteQueryAfter(statement, statement.getSql(), resultSet);
                this.resultSetOpenAfter(resultSet);
            }
            return resultSet;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error3);
            throw error3;
        }
    }
    
    @Override
    public int preparedStatement_executeUpdate(final FilterChain chain, final PreparedStatementProxy statement) throws SQLException {
        try {
            this.statementExecuteUpdateBefore(statement, statement.getSql());
            final int updateCount = super.preparedStatement_executeUpdate(chain, statement);
            this.statementExecuteUpdateAfter(statement, statement.getSql(), updateCount);
            return updateCount;
        }
        catch (SQLException error) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error);
            throw error;
        }
        catch (RuntimeException error2) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error2);
            throw error2;
        }
        catch (Error error3) {
            this.statement_executeErrorAfter(statement, statement.getSql(), error3);
            throw error3;
        }
    }
    
    protected void statementCreateAfter(final StatementProxy statement) {
    }
    
    protected void statementPrepareAfter(final PreparedStatementProxy statement) {
    }
    
    protected void statementPrepareCallAfter(final CallableStatementProxy statement) {
    }
    
    protected void resultSetOpenAfter(final ResultSetProxy resultSet) {
    }
    
    protected void statementExecuteUpdateBefore(final StatementProxy statement, final String sql) {
    }
    
    protected void statementExecuteUpdateAfter(final StatementProxy statement, final String sql, final int updateCount) {
    }
    
    protected void statementExecuteQueryBefore(final StatementProxy statement, final String sql) {
    }
    
    protected void statementExecuteQueryAfter(final StatementProxy statement, final String sql, final ResultSetProxy resultSet) {
    }
    
    protected void statementExecuteBefore(final StatementProxy statement, final String sql) {
    }
    
    protected void statementExecuteAfter(final StatementProxy statement, final String sql, final boolean result) {
    }
    
    protected void statementExecuteBatchBefore(final StatementProxy statement) {
    }
    
    protected void statementExecuteBatchAfter(final StatementProxy statement, final int[] result) {
    }
    
    protected void statement_executeErrorAfter(final StatementProxy statement, final String sql, final Throwable error) {
    }
}
